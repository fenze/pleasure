return function(self)
	return {
		Comment = { fg = self.foreground[4] },
		Number = { fg = self.orange[3] },
		Float = { link = "Number" },
		Boolean = { link = "Number" },
		Keyword = { fg = self.red[1] },
		Type = { fg = self.extra.powderblue },
		String = { fg = self.green[3] },
		Delimiter = { fg = self.foreground[2] },
		Operator = { fg = self.foreground[2] },
		Special = { fg = self.orange[3] },
		Character = { link = "String" },

		Include = { fg = self.red[1] },
		PreProc = { link = "Include" },
		Structure = { fg = self.red[1] },
		StorageClass = { fg = self.red[3] },
		Constant = { fg = self.orange[3] },
		Todo = { fg = self.yellow[1] },
		Statement = { fg = self.red[1] },
		Function = { fg = self.blue[1] },

		healthError = { fg = self.red[1] },
		healthSuccess = { fg = self.green[1] },
		healthWarning = { fg = self.orange[1] },

		["@lsp.type.comment"] = { link = "@comment" },
		["@lsp.type.enum"] = { link = "@type" },
		["@lsp.type.enumMember"] = { link = "@constant" },
		["@lsp.type.interface"] = { fg = self.blue[3] },
		["@lsp.type.keyword"] = { link = "@keyword" },
		["@lsp.type.namespace"] = { link = "@namespace" },
		["@lsp.type.parameter"] = { link = "@parameter" },
		["@lsp.type.property"] = { link = "@property" },
		["@lsp.type.variable"] = {},
		["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
		["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
		["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
		["@lsp.typemod.operator.injected"] = { link = "@operator" },
		["@lsp.typemod.string.injected"] = { link = "@string" },
		["@lsp.typemod.type.defaultLibrary"] = { fg = self.blue[3] },
		["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
		["@lsp.typemod.variable.injected"] = { link = "@variable" },
	}
end
